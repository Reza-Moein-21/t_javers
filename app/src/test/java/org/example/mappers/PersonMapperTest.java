/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example.mappers;

import org.apache.ibatis.session.SqlSessionFactory;
import org.example.DBExtension;
import org.example.inf.JaversConfig;
import org.example.inf.PageRequest;
import org.example.inf.PageResult;
import org.javers.core.Javers;
import org.javers.repository.sql.DialectName;
import org.javers.repository.sql.SqlRepositoryBuilder;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.sql.DataSource;
import java.util.stream.IntStream;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

@ExtendWith(DBExtension.class)
class PersonMapperTest {
    private static final Logger logger = LoggerFactory.getLogger(PersonMapperTest.class);

    private final SqlSessionFactory factory;
    private final DataSource dataSource;
    private Javers javers;

    PersonMapperTest(SqlSessionFactory factory, DataSource dataSource) {
        this.factory = factory;
        this.dataSource = dataSource;

    }

    @BeforeEach
    void setUp() {
        javers = new JaversConfig().applicationJavers(SqlRepositoryBuilder.sqlRepository()
                .withDialect(DialectName.ORACLE)
                .withConnectionProvider(dataSource::getConnection)
                .withSchema("test_db")
                .withSchemaManagementEnabled(true)
                .build());

        try (final var session = this.factory.openSession()) {
            final var personMapper = session.getMapper(PersonMapper.class);
            IntStream.range(1, 101)
                    .mapToObj(id -> Person.builder()
                            .id((long) id)
                            .fullName("Test Person " + id)
                            .build())
                    .forEach(personMapper::insert);
            session.commit(true);
        }
    }

    @Test
    void myTest() {
        try (final var session = this.factory.openSession()) {
            assertNotNull(session);
        }
    }


    @Test
    void pagingTest() {
        try (final var session = this.factory.openSession()) {
            final var personMapper = session.getMapper(PersonMapper.class);

            final var pageRequest = PageRequest.ofSize(50);

            final var persons = personMapper.findAll(pageRequest.offset(), pageRequest.limit());
            final var total = personMapper.totalItems();

            final var personPage = new PageResult<>(persons, total, pageRequest.pageNumber(), pageRequest.pageSize());

            assertNotNull(personPage.data());
            assertEquals(1, personPage.currentPage());
            assertEquals(50, personPage.pageSize());
            assertEquals(total, personPage.totalCount());
            logger.info("{}", personPage);
        }

    }

    @Test
    void updateTest() {
        try (final var session = this.factory.openSession()) {
            final var personMapper = session.getMapper(PersonMapper.class);

            final var person1 = personMapper.findOne(1L).orElseThrow();
            final var person1_updated = person1.toBuilder().fullName("Reza Moein").build();


            personMapper.update(person1_updated);
            final var person1_loaded = personMapper.findOne(1L).orElseThrow();
            assertEquals("Reza Moein", person1_loaded.fullName());

        }
    }

    @Test
    void diffTest() {
        try (final var session = this.factory.openSession()) {
            final var personMapper = session.getMapper(PersonMapper.class);

            final var personV1 = personMapper.findOne(1L).orElseThrow();

            javers.commit("user1", personV1);
            personMapper.update(personV1.toBuilder().fullName("Reza Moein").build());

            final var personV2 = personMapper.findOne(1L).orElseThrow();

            final var diff = javers.compare(personV1, personV2);

            logger.info("{}", diff.prettyPrint());

        }
    }
}
