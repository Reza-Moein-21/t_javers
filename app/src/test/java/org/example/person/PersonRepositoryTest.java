/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example.person;

import org.apache.ibatis.session.SqlSessionFactory;
import org.example.DBExtension;
import org.example.inf.PageRequest;
import org.example.inf.PageResult;
import org.javers.core.Javers;
import org.javers.core.diff.Diff;
import org.javers.repository.jql.QueryBuilder;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.stream.IntStream;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

@ExtendWith(DBExtension.class)
class PersonRepositoryTest {
    private static final Logger logger = LoggerFactory.getLogger(PersonRepositoryTest.class);

    private final SqlSessionFactory factory;
    private final Javers javers;

    PersonRepositoryTest(SqlSessionFactory factory, Javers javers) {
        this.factory = factory;
        this.javers = javers;

    }


    private void setupMockPerson() {
        try (final var session = this.factory.openSession()) {
            final var personMapper = session.getMapper(PersonRepository.class);
            IntStream.range(1, 101)
                    .mapToObj(id -> Person.builder()
                            .id((long) id)
                            .fullName("Test Person " + id)
                            .build())
                    .forEach(personMapper::insert);
            session.commit(true);
        }
    }


    @Test
    void pagingTest() {
        try (final var session = this.factory.openSession()) {
            final var personMapper = session.getMapper(PersonRepository.class);

            final var pageRequest = PageRequest.ofSize(10);

            PersonSearchParam param = new PersonSearchParam("Person");
            final var persons = personMapper.searchPersonBySearchParam(param, pageRequest.offset(), pageRequest.limit());
            final var total = personMapper.totalPersonBySearchParam(param);

            final var personPage = new PageResult<>(persons, total, pageRequest.pageNumber(), pageRequest.pageSize());

            assertNotNull(personPage.data());
            assertEquals(pageRequest.pageNumber(), personPage.currentPage());
            assertEquals(pageRequest.pageSize(), personPage.pageSize());
            assertEquals(total, personPage.totalCount());
            logger.info("{}", personPage);
        }

    }

    @Test
    void updateTest() {
        try (final var session = this.factory.openSession()) {
            final var personMapper = session.getMapper(PersonRepository.class);

            final var person1 = personMapper.findPersonById(1L).orElseThrow();
            final var person1_updated = person1.toBuilder().fullName("Reza Moein").build();


            personMapper.update(person1_updated);
            final var person1_loaded = personMapper.findPersonById(1L).orElseThrow();
            assertEquals("Reza Moein", person1_loaded.fullName());

        }
    }


    @Test
    void updateWithAuditTest() {
        try (final var session = this.factory.openSession()) {
            final var personMapper = session.getMapper(PersonRepository.class);

            final var origin = personMapper.findPersonById(1L).orElseThrow();
            final var updated = origin.toBuilder().fullName("Reza MMJ").version(origin.version()).build();

            // Check pessimistic lock
            if (origin.version() != updated.version()) {
                throw new IllegalStateException("Invalid version for update");
            }

            Diff diff = javers.compare(origin, updated);
            if (!diff.hasChanges()) {
                logger.info("No CHANGE DETECTED");
                return;
            }

            logger.info(diff.prettyPrint());

            final var forUpdate = updated.toBuilder().version(origin.version() + 1).build();
            logger.info("FOR UPDATE: {}", forUpdate);
            personMapper.update(forUpdate);
            session.commit();
            javers.commit("Admin user", forUpdate);

        }
    }

    @Test
    void personChanges() {
        final var jql = QueryBuilder.byInstanceId(1L, Person.class).build();

        logger.info(javers.findChanges(jql).devPrint());
    }
}
